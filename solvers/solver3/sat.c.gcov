        -:    0:Source:sat.c
        -:    0:Graph:/mnt/c/Users/nadim/Documents/Imperial/SoftwareReliability/software-reliability-/solvers/solver3/sat.gcno
        -:    0:Data:/mnt/c/Users/nadim/Documents/Imperial/SoftwareReliability/software-reliability-/solvers/solver3/sat.gcda
        -:    0:Runs:57
        -:    1:#include <signal.h>
        -:    2:#include <stdbool.h>
        -:    3:#include <stdio.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <string.h>
        -:    6:#include <stdint.h>
        -:    7:
        -:    8:#define TAG(ptr) ((int*) ((uintptr_t) (ptr) | 1))
        -:    9:#define UNTAG(ptr) (int*) ((uintptr_t) (ptr) & ~1)
        -:   10:#define IS_TAGGED(ptr) ((uintptr_t) (ptr) & 1)
        -:   11:
        -:   12:typedef struct {
        -:   13:  int nbvars;
        -:   14:  int nbclauses;
        -:   15:  int** clauses;
        -:   16:  int* clause_lit_count;
        -:   17:  char* assignments;
        -:   18:  int** lit_to_clauses;
        -:   19:  int* lit_to_clauses_count;
        -:   20:} model;
        -:   21:
        -:   22:typedef int var;
        -:   23:
        -:   24:bool DPLL(model phi);
        -:   25:bool consistent(model phi);
        -:   26:bool contains_empty(model phi);
        -:   27:model assign(var i, char val, model phi);
        -:   28:model copy(model phi, model new, bool alloc);
        -:   29:var choose_literal(model phi);
        -:   30:var find_unit_literal(model phi);
        -:   31:var find_pure_literal(model phi);
        -:   32:void remove_lit(model phi, int clause_index, var lit);
        -:   33:
        -:   34:char* latest_assignment;
        -:   35:int binary_search(int* arr, int size, int x);
        -:   36:
        -:   37://-----------------------------------------------------------------------------
function abscmpfunc called 557804 returned 100% blocks executed 100%
   557804:   38:int abscmpfunc (const void * a, const void * b) {
   557804:   39:   return ( abs(*(int*)a) - abs(*(int*)b) );
call    0 returned 557804
call    1 returned 557804
        -:   40:}
        -:   41:
        -:   42://-----------------------------------------------------------------------------
function termination_handler called 0 returned 0% blocks executed 0%
    #####:   43:void termination_handler(int sig_num) {
        -:   44:  (void)sig_num;
    #####:   45:  exit(0);
        -:   46:}
        -:   47:
function main called 57 returned 0% blocks executed 95%
       57:   48:int main(int argc, char **argv) {
       57:   49:    struct sigaction act;
call    0 returned 57
       57:   50:    act.sa_handler = &termination_handler;
       57:   51:    sigemptyset(&act.sa_mask);
call    0 returned 57
       57:   52:    act.sa_flags = 0;
       57:   53:    sigaction(SIGTERM, &act, NULL);
call    0 returned 57
       57:   54:    sigaction(SIGINT, &act, NULL);
call    0 returned 57
        -:   55:
       57:   56:    if (argc != 2) {
branch  0 taken 0 (fallthrough)
branch  1 taken 57
    #####:   57:        printf("sat accepts only 1 argument which is the filename of the formula.\n");
call    0 never executed
    #####:   58:        exit(EXIT_FAILURE);
call    0 never executed
        -:   59:    }
       57:   60:    char line[255];
call    0 returned 57
       57:   61:    FILE *fp = fopen(argv[1], "r");
call    0 returned 57
call    1 returned 57
call    2 returned 57
        -:   62:
       57:   63:    if (!fp) {
branch  0 taken 1 (fallthrough)
branch  1 taken 56
        1:   64:      printf("%s: No such file or directory.\n", argv[1]);
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:   65:      exit(EXIT_FAILURE);
call    0 returned 0
        -:   66:    }
        -:   67:
        -:   68:    // Find first line (skip comments)
       56:   69:    while (fgets(line, 255, fp) && line[0] == 'c');
call    0 returned 56
branch  1 taken 53 (fallthrough)
branch  2 taken 3
branch  3 taken 0
branch  4 taken 53 (fallthrough)
        -:   70:
       56:   71:    model phi;
call    0 returned 56
        -:   72:
       56:   73:    sscanf(line, "p cnf %d %d", &phi.nbvars, &phi.nbclauses);
        -:   74:
       56:   75:    phi.clauses = malloc(phi.nbclauses * sizeof(int*));
       56:   76:    phi.clause_lit_count = calloc(phi.nbclauses, sizeof(int));
       56:   77:    phi.lit_to_clauses = calloc(phi.nbvars, sizeof(int*));
       56:   78:    phi.lit_to_clauses_count = calloc(phi.nbvars, sizeof(int));
       56:   79:    phi.assignments = malloc(phi.nbvars * sizeof(char));
        -:   80:
        -:   81:    //  Parsing ---------------------------------------------------------------
   104253:   82:    for (int i = 0; i < phi.nbclauses; i++) {
branch  0 taken 104228
branch  1 taken 25 (fallthrough)
   104228:   83:      phi.clauses[i] = malloc(phi.nbvars * sizeof(int));
call    0 returned 104228
call    1 returned 104228
        -:   84:
   104228:   85:      fgets(line, 255, fp);
call    0 returned 104228
   104228:   86:      int lit;
call    0 returned 104228
        -:   87:
   104228:   88:      char* atom = strtok(line, " ");
call    0 returned 104228
   290663:   89:      while (atom != NULL) {
branch  0 taken 241021
branch  1 taken 49642 (fallthrough)
   241021:   90:        sscanf(atom, "%d", &lit);
   241021:   91:        if (!lit) break;
branch  0 taken 54555 (fallthrough)
branch  1 taken 186466
        -:   92:
   186466:   93:        if (abs(lit) > phi.nbvars) {
branch  0 taken 31 (fallthrough)
branch  1 taken 186435
       31:   94:          printf("Invalid variable: %d\n", lit);
call    0 returned 31
       31:   95:          exit(EXIT_FAILURE);
call    0 returned 0
        -:   96:        }
        -:   97:
   186435:   98:        phi.clauses[i][phi.clause_lit_count[i]++] = lit;
call    0 returned 186435
call    1 returned 186435
call    2 returned 186435
call    3 returned 186435
call    4 returned 186435
call    5 returned 186435
call    6 returned 186435
        -:   99:
   186435:  100:        atom = strtok (NULL, " ");
call    0 returned 186435
        -:  101:
   186435:  102:        int lit_index = abs(lit) - 1;
   186435:  103:        int sign = lit > 0 ? 1 : -1;
branch  0 taken 113891 (fallthrough)
branch  1 taken 72544
        -:  104:
   186435:  105:        if (!phi.lit_to_clauses[lit_index]) {
call    0 returned 186435
call    1 returned 186435
branch  2 taken 32966 (fallthrough)
branch  3 taken 153469
    32966:  106:          phi.lit_to_clauses[lit_index] = malloc(phi.nbclauses * sizeof(int));
call    0 returned 32966
call    1 returned 32966
        -:  107:        }
   186435:  108:        phi.lit_to_clauses[lit_index][phi.lit_to_clauses_count[lit_index]++] = (i + 1) * sign;
call    0 returned 186435
call    1 returned 186435
call    2 returned 186435
call    3 returned 186435
call    4 returned 186435
call    5 returned 186435
call    6 returned 186435
        -:  109:      }
        -:  110:    }
        -:  111:
       25:  112:    fclose(fp);
call    0 returned 25
        -:  113:
        -:  114:    // Sort lit_to_clauses
    33169:  115:    for (int i = 0; i < phi.nbvars; i++) {
branch  0 taken 33144
branch  1 taken 25 (fallthrough)
    33144:  116:      if (!phi.lit_to_clauses[i]) continue;
call    0 returned 33144
call    1 returned 33144
branch  2 taken 254 (fallthrough)
branch  3 taken 32890
   32890*:  117:      qsort(phi.lit_to_clauses[i], phi.lit_to_clauses_count[i], sizeof(int), abscmpfunc);
call    0 returned 32890
call    1 returned 32890
call    2 returned 32890
call    3 returned 32890
branch  4 taken 0 (fallthrough)
branch  5 taken 32890
call    6 returned 32890
        -:  118:    }
        -:  119:
        -:  120:    // Sort literals in clauses
   104198:  121:    for (int i = 0; i < phi.nbclauses; i++) {
branch  0 taken 104173
branch  1 taken 25 (fallthrough)
  104173*:  122:      qsort(phi.clauses[i], phi.clause_lit_count[i], sizeof(int), abscmpfunc);
call    0 returned 104173
call    1 returned 104173
call    2 returned 104173
call    3 returned 104173
branch  4 taken 0 (fallthrough)
branch  5 taken 104173
call    6 returned 104173
        -:  123:    }
        -:  124:
       25:  125:    if (DPLL(phi)) {
call    0 returned 25
branch  1 taken 23 (fallthrough)
branch  2 taken 2
       23:  126:      printf("SAT\n");
call    0 returned 23
    33116:  127:      for (int i = 0; i < phi.nbvars - 1; i++) {
branch  0 taken 33093
branch  1 taken 23 (fallthrough)
    33093:  128:        char ass = latest_assignment[i];
call    0 returned 33093
call    1 returned 33093
    33093:  129:        if (!ass) ass = 1; // if unassigned, assign 1
branch  0 taken 545 (fallthrough)
branch  1 taken 32548
        -:  130:
    33093:  131:        printf("%d ", (i + 1) * ass);
call    0 returned 33093
        -:  132:      }
       23:  133:      char ass = latest_assignment[phi.nbvars - 1];
call    0 returned 23
call    1 returned 23
      23*:  134:      if (!ass) ass = 1; // if unassigned, assign 1
branch  0 taken 0 (fallthrough)
branch  1 taken 23
       23:  135:      printf("%d\n", phi.nbvars * ass);
call    0 returned 23
        -:  136:    } else {
        2:  137:      printf("UNSAT\n");
call    0 returned 2
        -:  138:    }
        -:  139:
       25:  140:    exit(EXIT_SUCCESS);
        -:  141:}
        -:  142:
function assign called 25026 returned 100% blocks executed 100%
    25026:  143:model assign(var lit, char val, model phi) {
    25026:  144:  int lit_index = abs(lit) - 1;
        -:  145:
    25026:  146:  phi.assignments[lit_index] = val;
call    0 returned 25026
call    1 returned 25026
        -:  147:
    25026:  148:  int* lit_to_clauses = phi.lit_to_clauses[lit_index];
call    0 returned 25026
call    1 returned 25026
    25026:  149:  int clause_count = phi.lit_to_clauses_count[lit_index];
call    0 returned 25026
call    1 returned 25026
   192132:  150:  for (int j = 0; j < clause_count; j++) {
branch  0 taken 167106
branch  1 taken 25026 (fallthrough)
   167106:  151:    int clause = lit_to_clauses[j];
call    0 returned 167106
call    1 returned 167106
   167106:  152:    int clause_index = abs(clause) - 1;
        -:  153:
   167106:  154:    if(phi.clauses[clause_index]) {
call    0 returned 167106
call    1 returned 167106
branch  2 taken 167106 (fallthrough)
branch  3 taken 0
   167106:  155:      if (clause * val > 0) { // true after assignment
branch  0 taken 101620 (fallthrough)
branch  1 taken 65486
        -:  156:        // Remove clause
   101620:  157:        phi.clauses[clause_index] = TAG(phi.clauses[clause_index]);
call    0 returned 101620
call    1 returned 101620
call    2 returned 101620
call    3 returned 101620
        -:  158:      } else { // false after assignment
    65486:  159:        remove_lit(phi, clause_index, lit);
call    0 returned 65486
        -:  160:      }
        -:  161:    }
        -:  162:
        -:  163:  }
        -:  164:
    25026:  165:  return phi;
        -:  166:}
        -:  167:
function consistent called 7978 returned 100% blocks executed 100%
     7978:  168:bool consistent(model phi) {
 11125585:  169:  for (int i = 0; i < phi.nbclauses; i++) {
branch  0 taken 11125562
branch  1 taken 23 (fallthrough)
 11125562:  170:    if (!(IS_TAGGED(phi.clauses[i]))) return false;
call    0 returned 11125562
call    1 returned 11125562
branch  2 taken 7955 (fallthrough)
branch  3 taken 11117607
        -:  171:  }
       23:  172:  return true;
        -:  173:
        -:  174:}
        -:  175:
function contains_empty called 7955 returned 100% blocks executed 100%
     7955:  176:bool contains_empty(model phi) {
 50433867:  177:  for (int i = 0; i < phi.nbclauses; i++) {
branch  0 taken 50425932
branch  1 taken 7935 (fallthrough)
 50425932:  178:    if (!(IS_TAGGED(phi.clauses[i])) && phi.clause_lit_count[i] == 0) return true;
call    0 returned 50425932
call    1 returned 50425932
branch  2 taken 15849996 (fallthrough)
branch  3 taken 34575936
call    4 returned 15849996
call    5 returned 15849996
branch  6 taken 20 (fallthrough)
branch  7 taken 15849976
        -:  179:  }
        -:  180:
     7935:  181:  return false;
        -:  182:}
        -:  183:
function find_unit_literal called 23604 returned 100% blocks executed 100%
    23604:  184:var find_unit_literal(model phi) {
 99871758:  185:  for (int i = 0; i < phi.nbclauses; i++) {
branch  0 taken 99863780
branch  1 taken 7978 (fallthrough)
 99863780:  186:    if (!(IS_TAGGED(phi.clauses[i])) && phi.clause_lit_count[i] == 1) {
call    0 returned 99863780
call    1 returned 99863780
branch  2 taken 32836595 (fallthrough)
branch  3 taken 67027185
call    4 returned 32836595
call    5 returned 32836595
branch  6 taken 15626 (fallthrough)
branch  7 taken 32820969
    15626:  187:      return phi.clauses[i][0];
call    0 returned 15626
call    1 returned 15626
call    2 returned 15626
        -:  188:    }
        -:  189:  }
     7978:  190:  return 0;
        -:  191:}
        -:  192:
function find_pure_literal called 9425 returned 100% blocks executed 100%
     9425:  193:var find_pure_literal(model phi) {
 36740609:  194:  for (int i = 0; i < phi.nbvars; i++) {
branch  0 taken 36732631
branch  1 taken 7978 (fallthrough)
 36732631:  195:    if (phi.assignments[i]) continue; // already assigned var
call    0 returned 36732631
call    1 returned 36732631
branch  2 taken 34772009 (fallthrough)
branch  3 taken 1960622
        -:  196:
  1960622:  197:    int sign = 0;
  1960622:  198:    bool pure = true;
        -:  199:
  1960622:  200:    int clause_count = phi.lit_to_clauses_count[i];
call    0 returned 1960622
call    1 returned 1960622
  5480499:  201:    for (int j = 0; j < clause_count; j++) {
branch  0 taken 4899800
branch  1 taken 580699 (fallthrough)
  4899800:  202:      if (IS_TAGGED(phi.clauses[abs(phi.lit_to_clauses[i][j]) - 1])) { // deleted clause
call    0 returned 4899800
call    1 returned 4899800
call    2 returned 4899800
call    3 returned 4899800
call    4 returned 4899800
call    5 returned 4899800
branch  6 taken 1693409 (fallthrough)
branch  7 taken 3206391
  1693409:  203:          continue;
        -:  204:      } else {
  3206391:  205:        if (!sign) {
branch  0 taken 1381370 (fallthrough)
branch  1 taken 1825021
  1381370:  206:          sign = phi.lit_to_clauses[i][j] > 0 ? 1 : -1;
call    0 returned 1381370
call    1 returned 1381370
call    2 returned 1381370
call    3 returned 1381370
branch  4 taken 754590 (fallthrough)
branch  5 taken 626780
  1825021:  207:        } else if (sign != (phi.lit_to_clauses[i][j] > 0 ? 1 : -1)) {
call    0 returned 1825021
call    1 returned 1825021
call    2 returned 1825021
call    3 returned 1825021
branch  4 taken 912357 (fallthrough)
branch  5 taken 912664
branch  6 taken 1379923 (fallthrough)
branch  7 taken 445098
  1379923:  208:          pure = false;
  1379923:  209:          break;
        -:  210:        }
        -:  211:      }
        -:  212:    }
        -:  213:
  1960622:  214:    if (pure && sign) {
branch  0 taken 580699 (fallthrough)
branch  1 taken 1379923
branch  2 taken 1447 (fallthrough)
branch  3 taken 579252
     1447:  215:      return (sign * (i + 1));
        -:  216:    }
        -:  217:
        -:  218:  }
     7978:  219:  return 0;
        -:  220:}
        -:  221:
function choose_literal called 7935 returned 100% blocks executed 92%
     7935:  222:var choose_literal(model phi) {
 11007125:  223:  for (int i = 0; i < phi.nbclauses; i++) {
branch  0 taken 11007125
branch  1 taken 0 (fallthrough)
 11007125:  224:    if(!IS_TAGGED(phi.clauses[i])) {
call    0 returned 11007125
call    1 returned 11007125
branch  2 taken 7935 (fallthrough)
branch  3 taken 10999190
     7935:  225:      return abs(phi.clauses[i][0]);
call    0 returned 7935
call    1 returned 7935
call    2 returned 7935
        -:  226:    }
        -:  227:  }
        -:  228:
    #####:  229:  return 0;
        -:  230:}
        -:  231:
        -:  232://  Main DPLL algorithm -------------------------------------------------------
function DPLL called 7978 returned 100% blocks executed 100%
     7978:  233:bool DPLL(model phi) {
     7978:  234:  latest_assignment = phi.assignments;
        -:  235:
        -:  236:  // BCP
        -:  237:  var unit_literal;
    23604:  238:  while ((unit_literal = find_unit_literal(phi))) {
call    0 returned 23604
branch  1 taken 15626
branch  2 taken 7978 (fallthrough)
    15626:  239:    assign(unit_literal, (unit_literal > 0 ? 1 : -1), phi);
branch  0 taken 8459 (fallthrough)
branch  1 taken 7167
call    2 returned 15626
        -:  240:  }
        -:  241:
        -:  242:  // PLP
        -:  243:  var pure_literal;
     9425:  244:  while ((pure_literal = find_pure_literal(phi))) {
call    0 returned 9425
branch  1 taken 1447
branch  2 taken 7978 (fallthrough)
     1447:  245:    assign(pure_literal, (pure_literal > 0 ? 1 : -1), phi);
branch  0 taken 809 (fallthrough)
branch  1 taken 638
call    2 returned 1447
        -:  246:  }
        -:  247:
     7978:  248:  if (consistent(phi)) {
call    0 returned 7978
branch  1 taken 23 (fallthrough)
branch  2 taken 7955
       23:  249:    return true;
        -:  250:  }
        -:  251:
     7955:  252:  if (contains_empty(phi)) {
call    0 returned 7955
branch  1 taken 20 (fallthrough)
branch  2 taken 7935
       20:  253:    return false;
        -:  254:  }
        -:  255:
     7935:  256:  int l = choose_literal(phi);
call    0 returned 7935
        -:  257:
        -:  258:  static model m;
     7935:  259:  m = copy(phi, m, true);
call    0 returned 7935
     7935:  260:  if (DPLL(assign(l, 1, m))) return true;
call    0 returned 7935
call    1 returned 7935
branch  2 taken 7917 (fallthrough)
branch  3 taken 18
       18:  261:  return DPLL(assign(l, -1, copy(phi, m, false)));
call    0 returned 18
call    1 returned 18
call    2 returned 18
        -:  262:
        -:  263:}
        -:  264:
function copy called 7953 returned 100% blocks executed 89%
     7953:  265:model copy(model phi, model new, bool alloc) {
     7953:  266:  new.nbvars = phi.nbvars;
     7953:  267:  new.nbclauses = phi.nbclauses;
        -:  268:
     7953:  269:  if (alloc) {
branch  0 taken 7935 (fallthrough)
branch  1 taken 18
     7935:  270:    new.clauses = malloc(new.nbclauses * sizeof(int*));
     7935:  271:    new.clause_lit_count = calloc(phi.nbclauses, sizeof(int));
     7935:  272:    new.assignments = malloc(new.nbvars * sizeof(char));
     7935:  273:    new.lit_to_clauses = calloc(new.nbvars, sizeof(int*));
     7935:  274:    new.lit_to_clauses_count = calloc(new.nbvars, sizeof(int));
        -:  275:  }
        -:  276:
 50461521:  277:  for (int i = 0; i < new.nbclauses; i++) {
branch  0 taken 50453568
branch  1 taken 7953 (fallthrough)
 50453568:  278:    if (IS_TAGGED(phi.clauses[i])) {
call    0 returned 50453568
call    1 returned 50453568
branch  2 taken 34596749 (fallthrough)
branch  3 taken 15856819
 34596749:  279:      new.clauses[i] = phi.clauses[i];
call    0 returned 34596749
call    1 returned 34596749
call    2 returned 34596749
call    3 returned 34596749
 34596749:  280:      continue;
        -:  281:    }
        -:  282:
 15856819:  283:    int lit_count = phi.clause_lit_count[i];
call    0 returned 15856819
call    1 returned 15856819
 15856819:  284:    new.clause_lit_count[i] = lit_count;
call    0 returned 15856819
call    1 returned 15856819
        -:  285:
 15856819:  286:    if (alloc) {
branch  0 taken 15832144 (fallthrough)
branch  1 taken 24675
 15832144:  287:      new.clauses[i] = malloc(lit_count * sizeof(int));
call    0 returned 15832144
call    1 returned 15832144
        -:  288:    } else {
    24675:  289:      new.clauses[i] = UNTAG(new.clauses[i]);
call    0 returned 24675
call    1 returned 24675
call    2 returned 24675
call    3 returned 24675
        -:  290:    }
        -:  291:
15856819*:  292:    memcpy(new.clauses[i], phi.clauses[i], lit_count * sizeof(int));
call    0 returned 15856819
call    1 returned 15856819
call    2 returned 15856819
call    3 returned 15856819
branch  4 taken 0 (fallthrough)
branch  5 taken 15856819
branch  6 taken 0 (fallthrough)
branch  7 taken 15856819
        -:  293:  }
        -:  294:
 29934246:  295:  for (int i = 0; i < new.nbvars; i++) {
branch  0 taken 29926293
branch  1 taken 7953 (fallthrough)
 29926293:  296:    int clause_count = phi.lit_to_clauses_count[i];
call    0 returned 29926293
call    1 returned 29926293
        -:  297:
 29926293:  298:    if (alloc) {
branch  0 taken 29849371 (fallthrough)
branch  1 taken 76922
 29849371:  299:      new.lit_to_clauses[i] = malloc(clause_count * sizeof(int));
call    0 returned 29849371
call    1 returned 29849371
        -:  300:    }
        -:  301:
29926293*:  302:    memcpy(new.lit_to_clauses[i], phi.lit_to_clauses[i], clause_count * sizeof(int));
call    0 returned 29926293
call    1 returned 29926293
call    2 returned 29926293
call    3 returned 29926293
branch  4 taken 0 (fallthrough)
branch  5 taken 29926293
branch  6 taken 191 (fallthrough)
branch  7 taken 29926102
        -:  303:  }
        -:  304:
    7953*:  305:  memcpy(new.lit_to_clauses_count, phi.lit_to_clauses_count, new.nbvars * sizeof(int));
branch  0 taken 0 (fallthrough)
branch  1 taken 7953
branch  2 taken 0 (fallthrough)
branch  3 taken 7953
    7953*:  306:  memcpy(new.assignments, phi.assignments, new.nbvars * sizeof(char));
branch  0 taken 0 (fallthrough)
branch  1 taken 7953
branch  2 taken 0 (fallthrough)
branch  3 taken 7953
        -:  307:
     7953:  308:  return new;
        -:  309:}
        -:  310:
function remove_lit called 65486 returned 100% blocks executed 100%
    65486:  311:void remove_lit(model phi, int clause_index, var lit) {
    65486:  312:  int* clause = phi.clauses[clause_index];
call    0 returned 65486
call    1 returned 65486
    65486:  313:  int* clause_size = &phi.clause_lit_count[clause_index];
call    0 returned 65486
        -:  314:
    65486:  315:  int pos = binary_search(clause, *clause_size, lit);
call    0 returned 65486
call    1 returned 65486
    65486:  316:  if (pos < 0) return;
branch  0 taken 28647 (fallthrough)
branch  1 taken 36839
        -:  317:
   102588:  318:  for (int i = pos + 1; i < *clause_size; i++) {
call    0 returned 102588
branch  1 taken 65749
branch  2 taken 36839 (fallthrough)
    65749:  319:    clause[pos++] = clause[i];
call    0 returned 65749
call    1 returned 65749
call    2 returned 65749
call    3 returned 65749
        -:  320:  }
        -:  321:
    36839:  322:  (*clause_size)--;
call    0 returned 36839
call    1 returned 36839
        -:  323:
        -:  324:}
        -:  325:
function binary_search called 65486 returned 100% blocks executed 100%
    65486:  326:int binary_search(int* arr, int size, int x) {
    65486:  327:  int l = 0;
    65486:  328:  int r = size;
    65486:  329:  x = abs(x);
        -:  330:
   137269:  331:  while (l <= r) {
branch  0 taken 108622
branch  1 taken 28647 (fallthrough)
   108622:  332:    int m = l + (r - l) / 2;
        -:  333:
   108622:  334:    if (abs(arr[m]) == x)
call    0 returned 108622
call    1 returned 108622
branch  2 taken 36839 (fallthrough)
branch  3 taken 71783
    36839:  335:      return m;
        -:  336:
    71783:  337:    if (abs(arr[m]) < x) {
call    0 returned 71783
call    1 returned 71783
branch  2 taken 12426 (fallthrough)
branch  3 taken 59357
    12426:  338:      l = m + 1;
        -:  339:    } else {
    59357:  340:      r = m - 1;
        -:  341:    }
        -:  342:  }
        -:  343:
    28647:  344:  return -1;
        -:  345:}
